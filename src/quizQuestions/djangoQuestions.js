const djangoQuestionBank =[
    {
        question: 'How would you explain what models are?',
        answers: [
            'A model is a Python class that subclasses django.db.models.Model in which each attribute represents a database field.', 
            'A model is what is used to display a webpage from django.', 
            'A model in Django is where URLs are constructed in Django.', 
            'Models are the areas of Django where CSS templates are stored.', 
        ],
        correct: 'A model is a Python class that subclasses django.db.models.Model in which each attribute represents a database field.',
        explanation: 'Django will create a table for each model defined in the models.py file. When you create a model, Django will provides you with a practical API to query objects in the database easily.',
        questionId: '23000',
        keyword: ['Django Models'],
    },
    {
        question: 'What do you understand the term CRUD to mean?',
        answers: [
            'Clean, Rinse, Upsize, Download', 
            'CRUD is related to Class Based Views.', 
            'CRUD is a special kind of multiple inheritance for a class.', 
            'Create, Retrieve, Update, Delete', 
        ],
        correct: 'Create, Retrieve, Update, Delete',
        explanation: '',
        questionId: '23001',
        keyword: ['CRUD'],
    },
    {
        question: 'What does CSRF stand for and what is it?',
        answers: [
            'CSRF stands for Cross-site request forgery. the CSRF token introduces a hidden field with an autogenerated token to avoid cross-site request forgery attacks.', 
            'CSRF stands for Coding Size Return Font and applies to the font type that must be used in Django apps.', 
            'CSRF stands for Crisp Solid Ready For Production and describes how production ready code must be written in Django.', 
            'CSRF stands for nothing, but is used to save information to the Django database.', 
        ],
        correct: 'CSRF stands for Cross-site request forgery. the CSRF token introduces a hidden field with an autogenerated token to avoid cross-site request forgery attacks.',
        explanation: 'These attacks can consist of a malicious website or program peforming an unwanted action for a user on your site.',
        questionId: '23002',
        keyword: ['CSRF', 'Cross-site request forgery'],
    },
    {
        question: 'What are a couple of the advantageous features of Django?',
        answers: [
            'Django provides multiprocessor support and the ORM system has a lot of features', 
            'It is great for small projects.', 
            'Battery included, rapid development, security, scalable, community supported, admin interface, python web-framework.', 
            'Django is small and easy to learn.', 
        ],
        correct: 'Battery included, rapid development, security, scalable, community supported, admin interface, python web-framework.',
        explanation: 'Also time-tested, speed and app performance, admin interface, object oriented, REST Framework for APIs, Versatile.',
        questionId: '23003',
        keyword: ['advantages of Django, disadvantages of Django'],
    },
    {
        question: 'Explain which features of Django might be considered drawbacks?',
        answers: [
            'Not suitable for small projects, Does not provide multiprocessor support, ORM system lacks features, steep learning curve.', 
            'Battery included, rapid development, security, scalable, community supported, admin interface, python web-framework.', 
            'Time-tested, speed and app performance, admin interface, object oriented, REST Framework for APIs, Versatile', 
            'Django is not a widly used framework, which makes it difficult to find support.', 
        ],
        correct: 'Not suitable for small projects, Does not provide multiprocessor support, ORM system lacks features, steep learning curve.',
        explanation: 'Django is designed for building large applications quickly, and for this, it requires server processing time and bandwidth while developing, Bandwidth is the requirement for scaling the sites, and for small projects, large bandwidth gets wasted',
        questionId: '23004',
        keyword: ['advantages of Django, disadvantages of Django'],
    },
    {
        question: 'What is meant by Django MVT architecture?',
        answers: [
            'MVT is a Django architecture that merges Django with React and Typescript.', 
            'MVT stands for Mobile, Vital, Technology, and is a software design pattern used for developing a iOS and Android apps', 
            'MVT is a way to save data entered into a Django app.', 
            'MVT is a software design pattern for developing a web application. It consists of the following three entities, Model, Views, Template.', 
        ],
        correct: 'MVT is a software design pattern for developing a web application. It consists of the following three entities, Model, Views, Template.',
        explanation: '',
        questionId: '23005',
        keyword: ['model, view, template'],
    },
    {
        question: 'How is the project directory structured in Django?',
        answers: [
            'The Django project directory is structured from top to bottom.', 
            'Django uses the concept of projects and apps for managing the codes and presents them in a readable format. A Django project contains one or more apps within it, the files inlcude manage.py, __init.py__, settings.py, urls.py, wsgi.py.', 
            'The Django project directory is structured in the settings.py file.', 
            'The Django project directory is structured by the creators command in Django models.',
        ],
        correct: 'Django uses the concept of Projects and apps for managing the codes and presents them in a readable format. A Django project contains one or more apps within it, the files inlcude manage.py, __init.py__, settings.py, urls.py, wsgi.py, asgi.py.',
        explanation: '',
        questionId: '23006',
        keyword: ['directory structure'],
    },
    {
        question: 'What is the Django template language?',
        answers: [
            'Django Template Language or DTL is a Python class that subclasses django.db.models.Model in which each attribute represents a database field', 
            'Django Template Language or DTL is a special kind of multiple inheritance for a class.', 
            'Django Template Language or DTL is a text-based Template language that provides a bridge between scripts like HTML, CSS, JS, etc. and programming languages like python.', 
            'Django Template Language or DTL is another named for Class-based views.', 
        ],
        correct: 'Django Template Language or DTL is a text-based Template language that provides a bridge between scripts like HTML, CSS, JS, etc. and programming languages like python.',
        explanation: '',
        questionId: '23007',
        keyword: ['Django template language'],
    },
    {
        question: 'What are views in Django',
        answers: [
            'Django view is a python function that receives a web request and returns a web response. All the logic to return the desired response goes inside the view.', 
            'Views are a collection of database queries to retrieve objects from your database.', 
            'Views are a text-based Template language that provides a bridge between scripts like HTML, CSS, JS, etc. and programming languages like python.', 
            'Django views is a group of models, templates and urls that interact with teh framework to provide some functionality.', 
        ],
        correct: 'Django view is a python function that receives a web request and returns a web response. All the logic to return the desired response goes inside the view.',
        explanation: 'All the logic to return the desired response goes inside the view.First you create your application views, then define a URL pattern for each vview, and then create HTML templates to render the data generated by the view. Each view will render a template passing variables to it, and will return an HTTP response with the rendered output.',
        questionId: '23008',
        keyword: ['Django Views'],
    },
    {
        question: 'What is Django?',
        answers: [
            'Django is an open-source web application framework written in Python. Developed in a fast-paced newsroom, Django enables the rapid development of easily maintainable and secure websites.', 
            'Django is an open-source web application framework written in JavaScript. Developed for sports data collection, Django enables the slow development of easily maintainable and secure websites.', 
            'Django is a facter version of Python', 
            'Django is an open-source web application framework written in JavaScript. Developed for sports data collection, Django enables the rapid development of easily maintainable and secure websites.', 
        ],
        correct: 'Django is an open-source web application framework written in React. Developed in a social media company, to enable the rapid development of easily maintainable and secure websites.',
        explanation: '',
        questionId: '23009',
        keyword: 'Django',
    },
    {
        question: 'Where did Django get its name?',
        answers: [
            'From the Quentin Tarantino movie "Django".', 
            'From an old Monty Python Skit.', 
            'From a programming language used in the 1960s.', 
            'From jazz guitarist Django Reinhardt.', 
        ],
        correct: 'From jazz guitarist Django Reinhardt.',
        explanation: '',
        questionId: '23010',
        keyword: ['Django\'s Name'],
    },
    {
        question: 'What is the differnce between a project and an app in Django?',
        answers: [
            'A Django project and a Django app are the same thing.', 
            'A project is your overall environment, like a website, and an app would be a component of that website/project, like a shopping cart app for a retail site.', 
            'A Django project is where the views that display a website are held, and a Django app is where the url addresses for the webpage are held. ', 
            'A Django app is the overall django environment, like a website, and a Django project is a component of the app.', 
        ],
        correct: 'A project is your overall environment, like a website, and an app would be a component of that website/project, like a shopping cart app for a retail site.',
        explanation: '',
        questionId: '23011',
        keyword: ["Django project", "Django app"],
    },
    {
        question: 'How do you initialize a Django project?',
        answers: [
            'django.py startapp "name of project".', 
            '-m venv env  "name of project".', 
            'django-admin startproject "name of project".', 
            'django-admin runserver "name of project".', 
        ],
        correct: 'django-admin startproject "name of project".',
        explanation: '',
        questionId: '23012',
        keyword: ['initialize Django project'],
    },
    {
        question: 'How do you initialize a Django app?',
        answers: [
            'python manage.py startapp "name of app".', 
            'django.py startapp  "name of project".', 
            'django-admin startproject "name of project".', 
            'django-admin runserver "name of project".', 
        ],
        correct: 'python manage.py startapp "name of app"',
        explanation: '',
        questionId: '23013',
        keyword: ['initialize Django app'],
    },
    {
        question: 'How do you start a django development server?',
        answers: [
            'django-admin startproject "name of project".', 
            'django-admin runserver "name of project".', 
            'python manage.py startapp "name of app".', 
            'python manage.py runserver.', 
        ],
        correct: 'python manage.py runserver.',
        explanation: '',
        questionId: '23014',
        keyword: ['Django development server'],
    },
    {
        question: 'How would you explain the settings.py file?',
        answers: [
            'settings.py holds your project configurations, like the database connection and apps connected to the project.', 
            'setting.py is where html templates and css files are stored.', 
            'setting.py is where the administration page for a project is housed.', 
            'setting.py is where website user information is stored.', 
        ],
        correct: 'settings.py holds your project configurations, like the database connection and apps connected to the project.',
        explanation: '',
        questionId: '23015',
        keyword: ['settings.py'],
    },
    {
        question: 'What are url patterns in Django?',
        answers: [
            'Url patterns are CSRF tokens', 
            'Url patterns are what\'s used to configure app Django\'s built-in database', 
            'Url patterns are where the administration page for a project is housed', 
            'Url patterns are url paths to configure the website\'s routing.', 
        ],
        correct: 'url patterns are url paths to configure the website\'s routing.',
        explanation: 'You use url patterns to connect urls to views that then navigate to the website/webpage.',
        questionId: '23016',
        keyword: ['url patterns'],
    },
    {
        question: 'What is the Django admin panel?',
        answers: [
            'The Django admin panel is where the url paths to configure the website\'s routing are stored.', 
            'The Django admin panel is a graphical user interface that django provides to view data and manipulate data.', 
            'The Django admin panel is the file where the Django Documentation is kept.', 
            'The Django admin panel is the foreign key is kept.', 
        ],
        correct: 'Django admin panel is a graphical user interface that django provides to view data and manipulate data.',
        explanation: 'The Django admin panel comes right out of the box and ready to use after setting a project and creating a superuser',
        questionId: '23017',
        keyword: ['admin.py', 'Django adminitration'],
    },
    {
        question: 'What does "python manage.py makemigrations" do?',
        answers: [
            'The "python manage.py makemigrations" command gets static files ready for production.', 
            'The "python manage.py makemigrations" command starts the Django development server', 
            'The "python manage.py makemigrations" command creates a new Django project.', 
            'The "python manage.py makemigrations" command configures and prepares your database for changes.', 
        ],
        correct: 'The "python manage.py makemigrations" command configures and prepares your database for changes.',
        explanation: '',
        questionId: '23018',
        keyword: ['makemigrations'],
    },
    {
        question: 'What does "python manage.py migrate" do?',
        answers: [
            'The migrate "python manage.py migrate" command applies enforces the changes created by the makemigrations command.', 
            'The migrate "python manage.py migrate" command create a new Django Project.', 
            'The migrate "python manage.py migrate" command creates a new Django App.', 
            'The migrate "python manage.py migrate" command prepares static files for production.', 
        ],
        correct: 'The migrate "python manage.py migrate" command applies enforces the changes created by the makemigrations command.',
        explanation: 'migrate executes those SQL commands in the database file. So after executing migrate all the tables of your installed apps are created in your database file. You can confirm this by installing SQLite browser and opening db.sqlite3 you can see all the tables appears in the database file after executing migrate command.',
        questionId: '23019',
        keyword: ['migrate'],
    },
    {
        question: 'How is a database connection setup in Django?',
        answers: [
            'By running "python manage.py createsuperuser" command.', 
            'By running the "python manage.py migrate" command.', 
            'By updating the database dictionary in settings.py.', 
            'By running the "python manage.py runserver" command.', 
        ],
        correct: 'By updating the database dictionary in settings.py.',
        explanation: 'By default, Django is setup with an SQLite db, but that should not be used in production. SQL, Postgres, Oracle, MongoDB, are a few production ready databases.',
        questionId: '23020',
        keyword: 'database',
    },
    {
        question: 'Why do we add names to urls in Django?',
        answers: [
            'By assigning the url a name you can use this value as a reference in view methods and templates, which means any future changes made to the url path, automatically updates all url definitions in view methods and templates.', 
            'By assigning the url a name you can it makes the code base easier to understand.', 
            'Url names are needed in order to use class based views.', 
            'Url names are needed in order to query the database efficiently,', 
        ],
        correct: 'By assigning the url a name you can use this value as a reference in view methods and templates, which means any future changes made to the url path, automatically updates all url definitions in view methods and templates.',
        explanation: '',
        questionId: '23021',
        keyword: ['urls', 'url names'],
    },
    {
        question: 'How do we access urls dynamically?',
        answers: [
            'By adding curly braces with the percent sign {% %} in the urls.py file, and adding logic inside the braces.', 
            'By adding dobule curly braces {{ }} in the urls.py file, and the information inside the brackets act as a variable.', 
            'By adding angle brackets < > in the urls.py file, and the information inside the brackets act as a variable.', 
            'By writing the logic to access the urls in the models.py file.', 
        ],
        correct: 'By adding angle brackets < > in the urls.py file, and the information inside the brackets act as a variable.',
        explanation: '',
        questionId: '23022',
        keyword: ['urls', 'dynamic urls'],
    },
    {
        question: 'Where do you store templates?',
        answers: [
            'Templates are stored in the settings.py file.', 
            'Templates are stored in the django database.', 
            'Templates are stored in the static folder with the CSS and JavaScript files.', 
            'Either in the default app structure, which is a templates folder, and a sub-folder of the app name. Or the TEMPLATES list in settings.py can be updated to show where the templates are stored.', 
        ],
        correct: 'Either in the default app structure, which is a templates folder, and a sub-folder of the app name. Or the TEMPLATES list in settings.py can be updated to show where the templates are stored.',
        explanation: '',
        questionId: '23023',
        keyword: ['templates', 'template folder'],
    },
    {
        question: 'What do the double curly braces {{ }} mean in django?',
        answers: [
            'The double curly braces are a placeholder for a variable. This is used to output dynamic data.', 
            'The double curly braces allows you to access urls dynamically.', 
            'The double curly braces allows one html file to inherit or extend from another template html file.', 
            'The double curly braces are\'t necessarily needed, but are used to make the code look nicer.', 
        ],
        correct: 'The double curly braces are a placeholder for a variable. This is used to output dynamic data.',
        explanation: '',
        questionId: '23024',
        keyword: 'double curly braces: {{ }}',
    },
    {
        question: 'What do the curly braces with the percent sign mean {% %}?',
        answers: [
            'These braces allows you to access urls dynamically.', 
            'These are a placeholder for a variable. This is used to output dynamic data.', 
            'These braces are\'t necessary, but are used to make the code look nicer.', 
            'These are code blocks, where can write pythonic logic in the html template.', 
        ],
        correct: 'These are code blocks, where can write pythonic logic in the html template.',
        explanation: 'Inside {% %} we can provide conditional statements and for loops among other things.',
        questionId: '23025',
        keyword: ['curly braces with the percent sign: {% %}', 'python logic'],
    },
    {
        question: 'How do we inherit and extend a template?',
        answers: [
            'By using the extend or inherit tags at the top of the hmtl page, {% extends " " %} or {% inherit " " %}.', 
            'By typing "extend.html" or "inherit.html" in the views.py file.', 
            'By applying the extend or inherit tag in the urls.py file.', 
            'By applying the extend and inherit tag in the settings.py file.', 
        ],
        correct: 'By using the extend or inherit tags at the top of the hmtl page, {% extends " " %} or {% inherit " " %}.',
        explanation: '',
        questionId: '23026',
        keyword: ['template inheritance', 'template extending'],
    },
    {
        question: 'What are static files?',
        answers: [
            'Static files are what Django produces after running "python manage.py makemigrations.', 
            'Static files are where database entries are held.', 
            'Static files are where CSS, JavaScript files and images are stored, typically in their own folder.', 
            'Static files are where html templates are held.', 
        ],
        correct: 'Static files are where CSS, JavaScript files and images are stored, typically in their own folder.',
        explanation: '',
        questionId: '23027',
        keyword: ['static files'],
    },
    {
        question: 'How do we serve static files in development?',
        answers: [
            'By updating the STATICFILES_DIRS list in settings.py and pointing the directory to where you decide to host our static files.', 
            'By updating the MEDIA_ROOTS list in settings.py and pointing the directory to where you decide to host our static files.', 
            'By updating the Apps list in settings.py and point the directory to where the static files will be hosted', 
            'No changes need to be made from development to production to serve static files.', 
        ],
        correct: 'By updating the STATICFILES_DIRS list in settings.py and pointing the directory to where you decide to host our static files.',
        explanation: '',
        questionId: '23028',
        keyword: ['static files', 'STATICFILES_DIRS'],
    },
    {
        question: 'What is MEDIA_ROOT?',
        answers: [
            'The MEDIA_ROOT is the folder that holds the templates.', 
            'The MEDIA_ROOT is where the foreign keys are kept.', 
            'The MEDIA_ROOT is the folder that holds the static files related to the project.', 
            'The MEDIA_ROOT is the absolute path to the directory where your Django application will serve your media files from.', 
        ],
        correct: 'The MEDIA_ROOT is the absolute path to the directory where your Django application will serve your media files from.',
        explanation: '',
        questionId: '23029',
        keyword: ['MEDIA_ROOT', 'settings.py'],
    },
    {
        question: 'What is "python manage.py collectstatic"?',
        answers: [
            'Collectstatic takes are static files that are set in STATIC_ROOT, it bundles the files, duplicates the files and prepares the files for production.', 
            'Collectstatic is where django uploads user generated content.', 
            'Collectstatic is how html templates are extended and inherited.', 
            '"python manage.py collectstatic" is how you start a django development server', 
        ],
        correct: 'Collectstatic takes are static files that are set in STATIC_ROOT, it bundles the files, duplicates the files and prepares the files for production.',
        explanation: 'collectstatic essentially controls how static files are delivered and where they are placed.',
        questionId: '23030',
        keyword: ['collectstatic'],
    },
    {
        question: 'How do you serve Django static files in production?',
        answers: [
            'By using the MEDIA_ROOT.', 
            'By using by the makemigrations command.', 
            'By using python manage.py startapp "name of app".', 
            'One option is AWS S3 or DigitalOcean Spaces, another is using a third-party package like Django Whitenoise,', 
        ],
        correct: 'One option is AWS S3 or DigitalOcean Spaces, another is using a third-party package like Django Whitenoise,',
        explanation: 'Django is not designed to serve static files in production.',
        questionId: '23031',
        keyword: ['static files', 'production'],
    },
    {
        question: 'In Django models, what is a foreign key?',
        answers: [
            'The foreign key serve Django static files in production.', 
            'The foreign key sets a Many-To-One relationship between one model and another model.', 
            'The foreign key bundles the files, duplicates the files and prepares the files for production.', 
            'The foreign key inherit and extend a template', 
        ],
        correct: 'The foreign key sets a Many-To-One relationship between one model and another model.',
        explanation: 'In Django docs, a Reporter can be associated with many Article objects, but an Article can only have one Reporter object. in the "Article" class, we list "reporter = models.ForeignKey(Reporter)"',
        questionId: '23032',
        keyword: ['Django Models', 'foreign key', 'Many-To-One'],
    },
    {
        question: 'In Django models, what is a One-to-One relationship?',
        answers: [
            'A One-to-One relationship defines a link between two tables, where each row in a table appears once in another table.', 
            'A One-to-One relationship refers to a relationship between tables in a database, when a parent row in one table contains several child rows in the second table, and vice versa.', 
            'A One-to-One relationship refers to a relationship between settings.py and urls.py in the Django project folder.', 
            'A Many-to-Many relationship refers to a relationship between static files that are set in STATIC_ROOT.', 
        ],
        correct: 'A One-to-One relationship defines a link between two tables, where each row in a table appears once in another table.',
        explanation: 'In Djano docs. An example is a Model with a Place, Restaurant, and Waiter class. Because "Place" can technically be a "Restaurant", in the "Restaurant" model, we add "place = models.OneToOneField(Place)"',
        questionId: '23033',
        keyword: ['One-to-One relationship', 'Django Models'],
    },
    {
        question: 'Django architecture consists of?',
        answers: [
            'Brick, Steel, Cement, Copper', 
            'Projects, Apps, Databases, and Webpages', 
            'HTML, JavaScript, Python, R', 
            'Models, Views, Templates, Controller.', 
        ],
        correct: '',
        explanation: 'Models describes the database schema and data structure. Views controls what a user sees. Templates controls how the user sees the pages. Controller makes up of the Django framework and URL parsing.',
        questionId: '23034',
        keyword: ['Django architecture'],
    },
    {
        question: 'In Django models, what is a Many-to-Many relationship?',
        answers: [
            'A Many-to-Many relationship refers to a relationship between static files that are set in STATIC_ROOT.', 
            'A Many-to-Many relationship refers to a relationship between tables in a database when a parent row in one table contains several child rows in the second table, and vice versa.', 
            'A Many-to-Many relationship refers to a relationship that defines a link between two tables, where each row in a table appears once in another table.', 
            'A Many-to-Many relationship refers to a relationship between settings.py and urls.py in the Django project folder.', 
        ],
        correct: 'A Many-to-Many relationship refers to a relationship between tables in a database when a parent row in one table contains several child rows in the second table, and vice versa.',
        explanation: '',
        questionId: '23035',
        keyword: ['Many-to-Many relationships', 'Django Models'],
    },
    {
        question: 'What is the CharField attribute?',
        answers: [
            'CharField is a field that automatically increments according to available IDs.', 
            'CharField is a string field, for small- to large-sized strings.', 
            'CharField is a string field that checks that the value is a valid email address using EmailValidator', 
            'CharField is a string field for storing JSON encoded data.', 
        ],
        correct: 'CharField is a string field, for small- to large-sized strings.',
        explanation: '',
        questionId: '23036',
        keyword: ['CharField', 'Django Models'],
    },
    {
        question: 'How would you query all the items in a database?',
        answers: [
            'By using the Django REST Framework. i.e. DRF.objects.all().', 
            'By using django.get().', 
            'By using the the CharField attribute.', 
            'By using the model name.objects.all(), i.e. Category.objects.all() gets all objects from the Category model.', 
        ],
        correct: 'By using the model name.objects.all(), i.e. Category.objects.all() gets all objects from the Category model.',
        explanation: 'In views.py, the model would need to be imported, from .models import Category, and then it can be assigned to a variable like, categories = Category.objects.all().',
        questionId: '23037',
        keyword: ['database', 'database queries', 'objects.all()'],
    },
    {
        question: 'How would you query one items from a database?',
        answers: [
            'By using the model name.objects.get() and entering an attribute to get, i.e Image.objects.get(id=image_id).', 
            'By using django.get() and name the item.', 
            'By using the Django REST Framework.', 
            'by using the a foreign key.', 
        ],
        correct: 'By using the model name.objects.get() and entering an attribute to get, i.e Image.objects.get(id=image_id).',
        explanation: 'In views.py, the model would need to be imported, from .models import Image, and then it can be assigned to a variable like, image = Image.objects.get(id=image_id).',
        questionId: '23038',
        keyword: ['.get()', 'database', 'database queries'],
    },
    {
        question: 'How do you filter items by multiple attributes, like a user by first name and last name from a "User" model?',
        answers: [
            'Django.get(first_name="John, last_name="Smith)', 
            'User.objects.get("John", "Smith")', 
            'User.objects.all("John", "Smith")', 
            'User.objects.filter(first_name__contains="John", last_name__contains="Smith")', 
        ],
        correct: 'User.objects.filter(first_name__contains="John", last_name__contains="Smith")',
        explanation: '',
        questionId: '23039',
        keyword: ['.get()', 'database', 'database queries'],
    },
    {
        question: 'What is .filter()?',
        answers: [
            'Using .filter() allows you to refine a database query.', 
            'Using .filter() allows for a cleaner connection between your Django app and the server.', 
            '.filter() is a method used to create forms in Django.', 
            'The .filter() allows you to filter restricted urls from unrestricted urls.', 
        ],
        correct: '',
        explanation: 'For instance, to entries with specific publish date from the "Entry" model, use Entry.object.filter(pub_date__year=2006). Also, .filter() can be chained to create a more refined query.',
        questionId: '23040',
        keyword: ['.filter()', 'database', 'database queries'],
    },
    {
        question: 'If there is a "user" field in an "Article" model, how would you query a user from the "Article" model?',
        answers: [
            'By using the model name.objects.get(), adding a filter to the user attribute, like user__exact, i.e. Article.objects.get(user__exact="user name").', 
            'By using the model name.objects.all()', 
            'By using user.get(user).', 
            'By using A = Article(user="user_name")', 
        ],
        correct: 'By using the model name.objects.get(), adding a filter to the user attribute, like user__exact, i.e. Article.objects.get(user__exact="user name").',
        explanation: '',
        questionId: '23041',
        keyword: ['.get()', 'database', 'database queries'],
    },
    {
        question: 'What are Model Forms?',
        answers: [
            'Model Forms is a part of the Models, Views, Templates, Controller architechture of Django.', 
            'This is a class based representation of a form that is generated from a model.', 
            'It is a a software design pattern for developing a web application.', 
            'Model Forms is another name for the Django REST Framework.', 
        ],
        correct: 'This is a class based representation of a form that is generated from a model.',
        explanation: '',
        questionId: '23042',
        keyword: ['Django forms'],
    },
    {
        question: 'What is DRF?',
        answers: [
            'DRF is the Don\'t Repeat Falacy.', 
            'DRF is the Dart, Rust, Flutter tech stack.', 
            'DRF is the Django REST Framework.', 
            'DRF is the Django, Fortran, Redux tech stack.', 
        ],
        correct: 'DRF is the Django REST Framework.',
        explanation: 'DRF is used to build out APIs',
        questionId: '23043',
        keyword: ['DRF', 'REST', 'APIs'],
    },
    {
        question: 'Why is DRF needed?',
        answers: [
            'Because many frontend applications require a frontend framework or need an API and DRFs main benefit is that it makes serialization much easier.', 
            'DRF aren\'t needed that much.', 
            'DRF\'s are needed because they help with SEO.', 
            'DRF\'s are needed to prevent malicious DRF attacks.', 
        ],
        correct: 'Because many frontend applications require a frontend framework or need an API and DRFs main benefit is that it makes serialization much easier.',
        explanation: 'DRF common Use cases: You\'re creating a public-facing external API for third-party developers to access the data in your site, You\'re doing mobile development and you want your mobile app to make GET/PUT/POST requests to a Django backend. You\'re creating a web app, but you don\'t want to use the Django templating language. Instead you want to use the Django ORM but output everything as JSON and have your frontend created by a JavaScript MVC framework such as React, Backbone, AngularJS.',
        questionId: '23044',
        keyword: ['DRF', 'REST', 'APIs'],
    },
    {
        question: 'What are Django Signals?',
        answers: [
            'Django Signals are a way of letting you know what\'s going on a different part of the application.', 
            'Django Signals are data needed from Django by frontend frameworks in order for the program to work properly.', 
            'Django Signals are a class based representation of a form that is generated from a model.', 
            'Django Signals are Django models that are class based insteaed of function based.', 
        ],
        correct: 'Django Signals are a way of letting you know what\'s going on a different part of the application.',
        explanation: '',
        questionId: '23045',
        keyword: ['Django Signals'],
    },
    {
        question: 'How do you set restrictions on views in Django?',
        answers: [
            'You can use middleware, decorators that come with Django, custom build decorators, you can set the permissions classes.', 
            'You code an alert that request the user not to go on the webpage related to the restricted view.', 
            'You password protect every html template related to a restricted view and require the user to sign in to access that webpage.', 
            'You place the code "RESTRICTED.get(user_id)" in the body of the view you want to restrict.', 
        ],
        correct: 'You can use middleware, decorators that come with Django, custom build decorators, you can set the permissions classes.',
        explanation: '',
        questionId: '23046',
        keyword: ['views', 'restricted views', 'decorators'],
    },
    {
        question: 'What are Model Serializers',
        answers: [
            'Model Serializers uses Django\'s serialization to provide a mechanism for “translating” Django models into other formats like JSON or XML.', 
            'Model Serializers define a link between two tables, where each row in a table appears once in another table.', 
            'Model Serializers is a special kind of multiple inheritance for a class.', 
            'Model Serializers are a way of letting you know what\'s going on a different part of the application.', 
        ],
        correct: 'Model Serializers uses Django\'s serialization to provide a mechanism for “translating” Django models into other formats like JSON or XML.',
        explanation: '',
        questionId: '23047',
        keyword: [' Model Serializers', 'Django\'s serialization'],
    },
    {
        question: 'What does entry_set.all() do?',
        answers: [
            'entry_set.all() creates the link from the related model to the model that defines the relationship.', 
            'entry_set.all() allows you to query all of the items in a database', 
            'entry_set.all() is a part of the Models, Views, Templates, Controller architecture.', 
            'entry_set.all() is a method used to create forms in Django.', 
        ],
        correct: 'entry_set.all() creates the link from the related model to the model that defines the relationship.',
        explanation: 'If e = Entry.object.get(id=3) and e.authors.all() reutrns all author objects for this "Entry", then a= Author.objects.get(id=5) and a.entry_set.all() returns all "Entry" objects for this Author.',
        questionId: '23048',
        keyword: ['entry_set.all()', 'database', 'database queries'],
    },
];

export default djangoQuestionBank;

// {
//     question: '',
//     answers: [
//         '', 
//         '', 
//         '', 
//         '', 
//     ],
//     correct: '',
//     explanation: '',
//     questionId: '23020',
//     keyword: [''],
//    },


